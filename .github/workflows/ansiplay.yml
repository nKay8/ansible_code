name: EC2 Provisioning with Ansible

on:
  push:
    branches:
      - playbk
  workflow_dispatch:  # Allow manual trigger 

jobs:
  provision_ec2:
    name: Provision EC2 using Ansible
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1  # Setting region explicitly
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      EC2_USER: ubuntu  # Update this based on your EC2 instance type
      INSTANCE_TYPE: t2.micro  # EC2 instance type (can be adjusted)
      AMI_ID: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI, adjust based on your region
      S3_BUCKET: buckket-ansible
      S3_FILE: ansible-file
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install AWS CLI
      run: |
        pip install awscli
        aws --version

    - name: Create Security Group
      id: create_sg
      run: |
        SG_ID=$(aws ec2 create-security-group --region $AWS_REGION --group-name ansible-sg --description "Allow SSH and HTTP" --vpc-id $(aws ec2 describe-vpcs --region $AWS_REGION --query 'Vpcs[0].VpcId' --output text) --output text)
        echo "Security group created with ID: $SG_ID"
        aws ec2 authorize-security-group-ingress --region $AWS_REGION --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0  # Allow SSH
        aws ec2 authorize-security-group-ingress --region $AWS_REGION --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0  # Allow HTTP
        echo "::set-output name=sg_id::$SG_ID"

    - name: Launch EC2 instances
      id: launch_instances
      run: |
        INSTANCE_IDS=$(aws ec2 run-instances --region $AWS_REGION --image-id $AMI_ID --instance-type $INSTANCE_TYPE --key-name ec2_ansible --security-group-ids ${{ steps.create_sg.outputs.sg_id }} --count 2 --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=new-ansi}]' --query 'Instances[*].InstanceId' --output text)
        echo "Launched EC2 instances: $INSTANCE_IDS"
        echo "::set-output name=instance_ids::$INSTANCE_IDS"
        # Wait for instances to be running
        aws ec2 wait instance-running --region $AWS_REGION --instance-ids $INSTANCE_IDS
        PUBLIC_IPS=$(aws ec2 describe-instances --region $AWS_REGION --instance-ids $INSTANCE_IDS --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
        echo "Public IPs: $PUBLIC_IPS"
        echo "::set-output name=public_ips::$PUBLIC_IPS"

    - name: Download file from S3
      run: |
        aws s3 cp s3://$S3_BUCKET/$S3_FILE . --region $AWS_REGION

    - name: Add SSH key
      run: |
        echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Add EC2 instances to known_hosts
      run: |
        for ip in ${{ steps.launch_instances.outputs.public_ips }}; do
          ssh-keyscan -H "$ip" >> ~/.ssh/known_hosts
        done

    - name: Set up Ansible
      run: |
        pip install ansible

    - name: Run Ansible Playbook on EC2 instances
      run: |
        for ip in ${{ steps.launch_instances.outputs.public_ips }}; do
          ansible-playbook -i "$ip," --private-key ~/.ssh/id_rsa --user "$EC2_USER" ansible/playbook.yml
        done
